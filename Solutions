// Task 1: Number of Carry Operations
#include <stdio.h>
#include <string.h>

int main() {
    char A[] = "1234";
    char B[] = "567";
    int carry = 0, carryCount = 0;

    int lenA = strlen(A);
    int lenB = strlen(B);

    int maxLength = lenA > lenB ? lenA : lenB;

    for (int i = 0; i < maxLength; i++) {
        int digitA = (lenA - 1 - i >= 0) ? A[lenA - 1 - i] - '0' : 0;
        int digitB = (lenB - 1 - i >= 0) ? B[lenB - 1 - i] - '0' : 0;

        int sum = digitA + digitB + carry;
        if (sum >= 10) {
            carry = sum / 10;
            carryCount++;
        } else {
            carry = 0;
        }
    }

    printf("%d\n", carryCount);
    return 0;
}

// Task 2: Minimum Difference Between Any Pair
#include <stdio.h>
#include <limits.h>

int main() {
    int arr[] = {10, 2, 5, 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    int minDiff = INT_MAX;

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            int diff = arr[i] - arr[j];
            if (diff < 0) diff = -diff;
            if (diff < minDiff) minDiff = diff;
        }
    }

    printf("%d\n", minDiff);
    return 0;
}

// Task 3: Maximum Possible Sum of Increasing Subsequence of Length k
#include <stdio.h>

int main() {
    int n = 9, k = 4;
    int A[] = {2, 5, 3, 9, 15, 33, 6, 18, 20};
    int dp[9][4] = {0};

    for (int i = 0; i < n; i++) {
        dp[i][0] = A[i];
    }

    for (int len = 1; len < k; len++) {
        for (int i = len; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (A[j] < A[i] && dp[i][len] < dp[j][len - 1] + A[i]) {
                    dp[i][len] = dp[j][len - 1] + A[i];
                }
            }
        }
    }

    int maxSum = 0;
    for (int i = 0; i < n; i++) {
        if (dp[i][k - 1] > maxSum) {
            maxSum = dp[i][k - 1];
        }
    }

    printf("%d\n", maxSum);
    return 0;
}

// Task 4: Pair with Maximum Sum Less Than K
#include <stdio.h>

int main() {
    int arr[] = {5, 20, 110, 100, 10};
    int K = 100;
    int n = sizeof(arr) / sizeof(arr[0]);
    int maxSum = -1, num1, num2;

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            int sum = arr[i] + arr[j];
            if (sum < K && sum > maxSum) {
                maxSum = sum;
                num1 = arr[i];
                num2 = arr[j];
            }
        }
    }

    printf("%d, %d\n", num1, num2);
    return 0;
}

// Task 5: Nearest Integer to K
#include <stdio.h>
#include <limits.h>

int main() {
    int arr[] = {5, 20, -4, 12, -3};
    int K = 0;
    int n = sizeof(arr) / sizeof(arr[0]);
    int nearest = arr[0], minDiff = INT_MAX;

    for (int i = 0; i < n; i++) {
        int diff = arr[i] - K;
        if (diff < 0) diff = -diff;
        if (diff < minDiff) {
            minDiff = diff;
            nearest = arr[i];
        }
    }

    printf("%d\n", nearest);
    return 0;
}

// Task 6: Smallest Positive Number Missing
#include <stdio.h>

int main() {
    int arr[] = {-5, 2, 0, -1, -10, 15};
    int n = sizeof(arr) / sizeof(arr[0]);
    int found[1000] = {0}; // Assuming 1000 is the maximum possible value of any number in the array

    for (int i = 0; i < n; i++) {
        if (arr[i] > 0 && arr[i] <= n) {
            found[arr[i] - 1] = 1;
        }
    }

    int missing = n + 1;
    for (int i = 0; i < n; i++) {
        if (!found[i]) {
            missing = i + 1;
            break;
        }
    }

    printf("%d\n", missing);
    return 0;
}

// Task 7: Run Length Encoding
#include <stdio.h>
#include <string.h>

int main() {
    char str[] = "aaabbcc";
    int len = strlen(str);

    for (int i = 0; i < len; i++) {
        int count = 1;
        while (i + 1 < len && str[i] == str[i + 1]) {
            count++;
            i++;
        }
        printf("%d%c", count, str[i]);
    }
    printf("\n");
    return 0;
}

// Task 8: Number of Vehicles Registered Before the Given Vehicle
#include <stdio.h>

int main() {
    char vehicle[] = "WB-25A-0010";
    int registeredBefore = 0;
    int n, len = 0;
    char areaCode[3], rtoCode[4];

    sscanf(vehicle, "%2s-%3s-%d", areaCode, rtoCode, &n);

    while (rtoCode[len] != '\0') len++;

    if (len == 2) {
        registeredBefore = n;
    } else {
        if (rtoCode[2] >= '0' && rtoCode[2] <= '9') {
            registeredBefore = (rtoCode[2] - '0') * 10000 + n;
        } else {
            registeredBefore = (rtoCode[2] - 'A' + 1) * 10000 + n;
        }
    }

    printf("%d\n", registeredBefore);
    return 0;
}
